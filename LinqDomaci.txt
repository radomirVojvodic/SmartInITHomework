Zadatak 1:
--------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.X86;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Channels;
using System.Xml.Linq;
using static pocetak.Program;
using static System.Net.Mime.MediaTypeNames;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Security.Cryptography;
using static System.Formats.Asn1.AsnWriter;
using System.Diagnostics.Metrics;
using System.Runtime.Versioning;
using System.Drawing;
using System.Runtime.InteropServices;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks.Dataflow;
using System.Security.AccessControl;
using System.Runtime.Serialization;
using System.Net.NetworkInformation;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Net.Cache;

namespace pocetak
{


    public class Program
    {
        struct Customer {
            public int CustomerID;
            public string Name;
            public int Age;
            public string City;
        }
        
        static void Main(string[] args)
        {
            List<Customer> customers = new List<Customer>()
           {

               new Customer{CustomerID=1,Name="Jovan", Age=18, City="Novi Sad"},
               new Customer{CustomerID=2,Name="Ana", Age=38, City="Beograd"},
               new Customer{CustomerID=3,Name="Aleksa", Age=21, City="Nis"},
               new Customer{CustomerID=4,Name="Tijana", Age=20, City="Beograd"},
               new Customer{CustomerID=5,Name="Milan", Age=44, City="Novi Sad"},
               new Customer{CustomerID=6,Name="Sofija", Age=57, City="Bac"},

           };


            //a)Iz liste kupaca izdvaja kupca sa ID - em 3
            Console.WriteLine("Kupac sa IDem 3 linq query");
            var idThree = from c in customers where c.CustomerID == 3 select c;
            foreach(var id in idThree)
            {
                Console.WriteLine(id.Name);
            }

            Console.WriteLine("Kupac sa IDem 3 fluent query");
            var idThree2 = customers.Where(c => c.CustomerID == 3);
            foreach (var id in idThree2)
            {
                Console.WriteLine(id.Name);
            }
            Console.WriteLine("----------------------------");

            //b)Pronalazi najmlađeg kupca
            Console.WriteLine("Najmladji kupac:");
            var yougestCust = customers.OrderBy(c => c.Age).FirstOrDefault();
            Console.WriteLine(yougestCust.Name);

            Console.WriteLine("----------------------------");

            //c)Iz liste kupaca izdvaja one koji su punoletni i imaju manje od 50 godina
            Console.WriteLine("kupci koji su punoletni i imaju manje od 50 godina linq nacin:");
            var adultCust = from c in customers where c.Age >= 18 && c.Age < 50 select c;
            foreach(var adult in adultCust)
            {
                Console.WriteLine(adult.Name);
            }

            Console.WriteLine("kupci koji su punoletni i imaju manje od 50 godina fluent nacin:");
            var adultCust2 = customers.Where(c => c.Age >= 18 && c.Age < 50);
            foreach (var adult in adultCust2)
            {
                Console.WriteLine(adult.Name);
            }
            Console.WriteLine("----------------------------");

            //d)Sortira listu kupaca po godinama
            Console.WriteLine("Sortiranje kupaca po godinama linq nacin:");
            var sordtedCust = from c in customers orderby c.Age select c;
            foreach( var sordted in sordtedCust)
            {
                Console.WriteLine(sordted.Name+", godine: "+sordted.Age);
            };

            Console.WriteLine("Sortiranje kupaca po godinama fluent nacin:");
            var sordtedCust2 = customers.OrderBy(c => c.Age);
            foreach (var sordted in sordtedCust2)
            {
                Console.WriteLine(sordted.Name + ", godine: " + sordted.Age);
            };
            Console.WriteLine("----------------------------");

            //e)Iz liste kupaca izdvaja one koji ne žive u Beogradu
            Console.WriteLine("Kupci koji ne zive u Beogradu linq nacin:");
            var noBgCust = from c in customers where c.City != "Beograd" select c;
            foreach(var noBG in noBgCust)
            {
                Console.WriteLine(noBG.Name + ", Grad:" + noBG.City);
            }

            Console.WriteLine("Kupci koji ne zive u Beogradu fluent nacin:");
            var noBgCust2 = customers.Where(c => c.City != "Beograd");
            foreach (var noBG in noBgCust2)
            {
                Console.WriteLine(noBG.Name + ", Grad:" + noBG.City);
            }
            Console.WriteLine("----------------------------");

            //f)Iz liste kupaca izdvaja one čije ime ne sadrži slovo i
            Console.WriteLine("Kupci koji u svom imenu ne sadrze slovo i linqu nacin:");
            var noICust = from c in customers where !c.Name.ToLower().Contains("i") select c;
            foreach (var noI in noICust)
            {
                Console.WriteLine(noI.Name);
            }

            Console.WriteLine("Kupci koji u svom imenu ne sadrze slovo i fluent nacin:");
            var noICust2 = customers.Where(c => !c.Name.ToLower().Contains("i"));
            foreach (var noI in noICust2)
            {
                Console.WriteLine(noI.Name);
            }
            Console.WriteLine("----------------------------");

            //g)Iz liste kupaca izdvaja one čije ime sadrži slovo a i sortira ih po imenu
            Console.WriteLine("Kupci koji sadrze slovo a u imenu i sortira ih po duzini imena linqu nacin:");
            var sortedContainACust = from c in customers where c.Name.ToLower().Contains("a") orderby c.Name.Length select c;
            foreach (var sort in sortedContainACust)
            {
                Console.WriteLine(sort.Name);
            }

            Console.WriteLine("Kupci koji sadrze slovo a u imenu i sortira ih po duzini imena fluent nacin:");
            var sortedContainACust2 = customers.Where(c => c.Name.ToLower().Contains("a")).OrderBy(c => c.Name.Length);
            foreach (var sort in sortedContainACust2)
            {
                Console.WriteLine(sort.Name);
            }
        }
    }

 }



Zadatak 2:
--------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.X86;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Channels;
using System.Xml.Linq;
using static pocetak.Program;
using static System.Net.Mime.MediaTypeNames;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Security.Cryptography;
using static System.Formats.Asn1.AsnWriter;
using System.Diagnostics.Metrics;
using System.Runtime.Versioning;
using System.Drawing;
using System.Runtime.InteropServices;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks.Dataflow;
using System.Security.AccessControl;
using System.Runtime.Serialization;
using System.Net.NetworkInformation;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Net.Cache;

namespace pocetak
{


    public class Program
    {
        struct Studnet {
            public int indexNo;
            public string StudentName;
            public int Age;
        }
        
        static void Main(string[] args)
        {
            List<Studnet> studentList = new List<Studnet>()
           {

               new Studnet{indexNo=110,StudentName="Nikola", Age=22},
               new Studnet{indexNo=111,StudentName="Nemanja", Age=20},
               new Studnet{indexNo=112,StudentName="Tamara", Age=22},
               new Studnet{indexNo=113,StudentName="Strahinja", Age=21},
               new Studnet{indexNo=114,StudentName="Marina", Age=21},
               new Studnet{indexNo=115,StudentName="Nikola", Age=21 },

           };


           

            var orderByResult = from s in studentList orderby s.StudentName, s.Age select s;
            foreach(var student in orderByResult)
            {
                Console.WriteLine(student.StudentName+", godine:"+student.Age);
            }
        }
    }

 }

Zadatak 3:
---------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.X86;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Channels;
using System.Xml.Linq;
using static pocetak.Program;
using static System.Net.Mime.MediaTypeNames;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Security.Cryptography;
using static System.Formats.Asn1.AsnWriter;
using System.Diagnostics.Metrics;
using System.Runtime.Versioning;
using System.Drawing;
using System.Runtime.InteropServices;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks.Dataflow;
using System.Security.AccessControl;
using System.Runtime.Serialization;
using System.Net.NetworkInformation;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Net.Cache;

namespace pocetak
{


    public class Program
    {
        struct Studnet {
            public int indexNo;
            public string StudentName;
            public int Age;
        }
        
        static void Main(string[] args)
        {
            List<Studnet> studentList = new List<Studnet>()
           {

               new Studnet{indexNo=110,StudentName="Nikola", Age=22},
               new Studnet{indexNo=111,StudentName="Nemanja", Age=20},
               new Studnet{indexNo=112,StudentName="Tamara", Age=22},
               new Studnet{indexNo=113,StudentName="Strahinja", Age=21},
               new Studnet{indexNo=114,StudentName="Marina", Age=21},
               new Studnet{indexNo=115,StudentName="Nikola", Age=21 },

           };




            var groupedStudents = from s in studentList group s by s.Age into ageGroup select new { Age = ageGroup.Key, Students = ageGroup.Select(n => n.StudentName) };
            
            foreach(var result in groupedStudents)
            {
                Console.WriteLine($"Age Group: {result.Age}\nStudent Name: {string.Join(", ", result.Students)}\n");
            }
        }
    }

 }

Zadatak 4:
-------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.X86;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Channels;
using System.Xml.Linq;
using static pocetak.Program;
using static System.Net.Mime.MediaTypeNames;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Security.Cryptography;
using static System.Formats.Asn1.AsnWriter;
using System.Diagnostics.Metrics;
using System.Runtime.Versioning;
using System.Drawing;
using System.Runtime.InteropServices;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks.Dataflow;
using System.Security.AccessControl;
using System.Runtime.Serialization;
using System.Net.NetworkInformation;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Net.Cache;

namespace pocetak
{


    public class Program
    {
        
        
        static void Main(string[] args)
        {
            string[] names = { "Bojana", "Ivana", "Draga", "Milica", "Tina" };

            Console.WriteLine("Pronalazi sva imena (iz niza names) koja u sebi imaju slovo i (malo ili veliko) Sortira ta imena po dužini u opadajućem redosledu LINQ nacin:");
            var sortedNames = from s in names where s.ToLower().Contains("i") orderby s.Length descending select s;
            foreach(var name in sortedNames)
            {
                Console.WriteLine(name+", Duzina imena:"+ name.Length);
            }

            Console.WriteLine("Pronalazi sva imena (iz niza names) koja u sebi imaju slovo i (malo ili veliko) Sortira ta imena po dužini u opadajućem redosledu Fleunt nacin:");
            var sortedNames2 = names.Where(s => s.ToLower().Contains("i")).OrderByDescending(s => s.Length);
            foreach (var name in sortedNames2)
            {
                Console.WriteLine(name + ", Duzina imena:" + name.Length);
            }
        }
    }

 }


    










      




    



    







   
    
